##通过静态工厂方法替换构造器
传统方法通过提供一个公共方法构造器来为客户提供创造实例的方法。在每一个程序员的工具箱中，应该存在另外一种技术。
一个Class可以通过一个公共静态工厂方法（一个简单的静态方法返回类的实例）提供。通过Boolean举一个简单的例子。
这个方法将boolean转换成为Boolean对象引用：
```java
public static Boolean valueOf (boolean b) {
    return b? Boolean.TRUE:Boolean.FALSE;
}
```
注意，一个静态的工厂方法并不等同于设计模式中的工厂方法模式。静态工厂方法的描述与设计模式中的并不等价。  
一个类可以为它的客户端提供静态工厂方法以替换公共构造器或者除此之外的方法。但是，静态工厂方法替换公共构造器同时具有优缺点。  

**不同于构造器，静态工厂方法的一个优点是他具有名字。** 如果构造函数的参数本身没有描述被返回的对象，则具有良好选择名称的静态工厂更易于使用并且生成的客户端代码更易于阅读。
例如，BigInteger类的构造函数，返回一个可能为质数的BigInteger，更好的表达方式是静态工厂方法命名为BigInteger
.probablePrime。  
一个类可以仅包含一个给定签名的构造器。程序员已经知道通过提供两个参数列表仅仅参数类型顺序不同的构造器来获取这种限制。这是一个非常不好的注意。
API的使用者将无法记得哪一个构造器，最终将会在错误的调用中结束。人们在月都代码时，没有类的参考文档，将无法知道构造器对应的代码功能。
因为他们有名称，静态工厂方法并不会共享限制条件这点在前面的段落中已经被讨论过。在这个一个类有多个具有相同签名构造器的例子中，通过静态工厂发发替换构造器，
并且仔细选择名字，并高亮区别他们的不同。  
第二个优点，静态工厂方法不项构造器一样每次都需要创建一个新的实例。这就满足了不可变类通过预先创建实例
或缓存实例来创建。避免了他们重复创建不必要的重复实例。  
Boolean.valueOf(boolean)方法实现这个技术。它从不创建对象。这个技术类似于享元模式。它可以大大提高
等价对象需要频繁创建，也别是他们的创建开销极大的程序的性能。  
静态工厂方法的能力是从频繁调用的类中返回相同的对象。让类在任何时候对已经存在的实例进行严格的控制。
类的这一行为被称为实例控制。编写实例控制有几个原因。实例控制允许一个类产生一个单例或不可实例化。
另外，它允许一个不可变值类来保证没有两个相等的实例存在：a.equals（b）如果且仅当a==b时。
这是Flyweight模式的基础。Enum类型（第34项）提供了这种保证。  
第三个优势，静态工厂方法可以返回实例的子类型。这让你可以更灵活选择方会的实例。  
一个应用
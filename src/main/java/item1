##通过静态工厂方法替换构造器
传统方法通过提供一个公共方法构造器来为客户提供创造实例的方法。在每一个程序员的工具箱中，应该存在另外一种技术。
一个Class可以通过一个公共静态工厂方法（一个简单的静态方法返回类的实例）提供。通过Boolean举一个简单的例子。
这个方法将boolean转换成为Boolean对象引用：
```java
public static Boolean valueOf (boolean b) {
    return b? Boolean.TRUE:Boolean.FALSE;
}
```
注意，一个静态的工厂方法并不等同于设计模式中的工厂方法模式。静态工厂方法的描述与设计模式中的并不等价。  
一个类可以为它的客户端提供静态工厂方法以替换公共构造器或者除此之外的方法。但是，静态工厂方法替换公共构造器同时具有优缺点。  

**不同于构造器，静态工厂方法的一个优点是他具有名字。** 如果构造函数的参数本身没有描述被返回的对象，则具有良好选择名称的静态工厂更易于使用并且生成的客户端代码更易于阅读。
例如，BigInteger类的构造函数，返回一个可能为质数的BigInteger，更好的表达方式是静态工厂方法命名为BigInteger
.probablePrime。  
一个类可以仅包含一个给定签名的构造器。程序员已经知道通过提供两个参数列表仅仅参数类型顺序不同的构造器来获取这种限制。这是一个非常不好的注意。
API的使用者将无法记得哪一个构造器，最终将会在错误的调用中结束。人们在月都代码时，没有类的参考文档，将无法知道构造器对应的代码功能。